#include "stdafx.h"
#include "Player.h"
//?∏Î?
#include "StageManager.h"
#include "Stage.h"
#include "ObjectManager.h"
#include "EnemyManager.h"
#include "CollisionManager.h"
#include "Enemy.h"
#include "ItemObj.h"
#include "Object.h"
//ªÛ≈¬
#include "IPlayerState.h"
#include "playerIdle.h"
#include "playerWait.h"
#include "playerWalk.h"
#include "playerRun.h"
#include "playerJump.h"
#include "playerStick.h"
#include "playerClimb.h"
#include "playerClimbTop.h"
#include "playerPick.h"
#include "playerGrab.h"
#include "playerGuard.h"
#include "playerRoll.h"
#include "playerHit.h"
#include "playerStun.h"
#include "playerStand.h"
#include "playerDown.h"
#include "playerDead.h"
#include "playerThrow.h"
#include "playerStomp.h"
#include "playerCombo1.h"
#include "playerCombo2.h"
#include "playerCombo3.h"
#include "playerSAttack.h"
#include "playerDashAttack.h"
#include "playerDashSAttack.h"
#include "playerJumpAttack.h"
#include "playerSAttackDown.h"

#include "Weapon.h"
//Ï¥àÍ∏∞??
HRESULT Player::init()
{
	/*====================================================================
		?åÎûò?¥Ïñ¥???§Î∏å?ùÌä∏ Ï¥àÍ∏∞?îÏ? Í∏∞Î≥∏ ?§Ï†ï???©Îãà??
	====================================================================*/
	_obj.init(OBJECT_GROUP::PLAYER, IMG_M->findImage("pl_wait"), vector3(WINSIZEX / 2, 0, WINSIZEY / 2 + 200));

	//Í∏∞Î≥∏ Î≥Ä??Ï¥àÍ∏∞??
	{
		_obj.ani = new animation;
		_info.jumpPower = 0;
		_info.speed = 4.f;

		_info.hasMember = false;
		_info.hasWeapon = false;
		_info.isImmune = false;
		_info.isAttack = false;
		_info.isHit = false;
		_info.isDead = false;
		_info.isControl = true;
		_info.isConDest = true;
		_info.isSky = false;
		_info.isClimb = false;

		_info.moveDest = MOVE_DIRECTION::RIGHT;
		_info.dest = DIRECTION::RIGHT;
		_info.goalState = GOALPOS::PLAYER;

		_info.hp = _info.maxHP = 100;
		_info.force = 10;
		_info.LV = 1;
		_info.exp = 0;
		_info.hitCount = 3;

		_info.frameTimer = TIME_M->getWorldTime();
		_info.rendType = RENDERTYPE::FRAME_RENDER;
		_info.immuneTimer = 0;
	}

	//?ÅÌÉú?®ÌÑ¥ ?±Î°ù
	{
		_idle = new playerIdle;
		_wait = new playerWait;
		_walk = new playerWalk;
		_run = new playerRun;
		_jump = new playerJump;
		_stick = new playerStick;
		_climb = new playerClimb;
		_climbTop = new playerClimbTop;
		_pick = new playerPick;

		_grab = new playerGrab;
		_guard = new playerGuard;
		_roll = new playerRoll;
		_hit = new playerHit;
		_stun = new playerStun;
		_stand = new playerStand;
		_down = new playerDown;
		_dead = new playerDead;

		_throw = new playerThrow;
		_stomp = new playerStomp;
		_combo1 = new playerCombo1;
		_combo2 = new playerCombo2;
		_combo3 = new playerCombo3;

		_sAttack = new playerSAttack;
		_dashAttack = new playerDashAttack;
		_dashSAttack = new playerDashSAttack;
		_jumpAttack = new playerJumpAttack;
		_SAttackDown = new playerSAttackDown;
	}
	setState(PL_STATE::WAIT);
	return S_OK;
}

void Player::release()
{
}

//?ÖÎéÉ ?úÏÑú Ï§ëÏöî?®‚òÖ ?ÅÌÉú->Ï§ëÎ†•->?§ÏûÖ??
void Player::update()
{
	//cout << (int)_info.state<< endl;

	_obj.prePos = _obj.pos;
	_obj.preShadow = _obj.shadow;

	//?ÅÌÉú?ÖÎç∞?¥Ìä∏
	_IState->UpdateState();

	//Ï§ëÎ†•?ëÏö©
	gravity();

	//?§ÏûÖ??
	keyInput();

	
	 hit();
	 //Î¨¥Í∏∞ ?ÖÎéÉ
	if (_info.attackObj!=NULL)weaponUpdate();
	//æ∆¿Ã≈€ ªÛ»£¿€øÎ
	checkItem();

	//?§Î∏å?ùÌä∏ ?ÖÎéÉ
	_obj.update();
	_obj.shadowUpdate();
	
	//?†Îãà ?ÑÎ†à???ÖÎéÉ
	if (_info.rendType == RENDERTYPE::ANI_RENDER) _obj.ani->frameUpdate(TIME_M->getElapsedTime() * 7);

	//?ÑÎ†à?ÑÏóÖ??
	playFrame();

	if (KEY_M->isOnceKeyDown(VK_NUMPAD0))
	{
		cout << "Í∑∏Î¶º??LT X: " << _obj.shadow.LT.x << endl;
		cout << "Í∑∏Î¶º??LT Y: " << _obj.shadow.LT.y << endl;
		cout << "Í∑∏Î¶º??LT Z: " << _obj.shadow.LT.z << endl;

		cout << "Í∑∏Î¶º??pos X: " << _obj.shadow.pos.x << endl;
		cout << "Í∑∏Î¶º??pos Y: " << _obj.shadow.pos.y << endl;
		cout << "Í∑∏Î¶º??pos Z: " << _obj.shadow.pos.z << endl;

		cout << "Ï∫êÎ¶≠??X: " << _obj.pos.x << endl;
		cout << "Ï∫êÎ¶≠??Y: " << _obj.pos.y << endl;
		cout << "Ï∫êÎ¶≠??Z: " << _obj.pos.z << endl;
		if (_platform != nullptr)
		{
			cout << "?åÎû´??X: " << _platform->bottomPlane[0].getEnd().x << endl;
			cout << "?åÎû´??Y: " << _platform->bottomPlane[0].getEnd().y << endl;
			cout << "?åÎû´??Z: " << _platform->bottomPlane[0].getEnd().z << endl;
		}
		else cout << "NULL" << endl;
		
	}
	
}

//?åÎçî
void Player::render()
{
	/*====================================================================
		Z-ORDER???∞Îùº ?åÌåå ?ÑÎ†à???åÎçî ?úÌÇµ?àÎã§.
	====================================================================*/

	//?åÎûò?¥Ïñ¥ ?§Î∏å?ùÌä∏ ?åÎçî
	ZORDER_M->renderObject(getMapDC(), &_obj, _info.rendType);

	//Î¨¥Í∏∞Î•?Í∞ÄÏßÄÍ≥??àÏùÑ ???òÏ†∏Î≤ÑÎ†∏?ÑÎïå ?òÏ†∏ÏßÄ??Î¨¥Í∏∞Î•??åÎçî)
	if(!_info.hasWeapon)
	{ 
		//?§Î∏å?ùÌä∏Ï∞∏Ï°∞Î•??ÉÏ? ?äÏïòÍ≥? ?åÎçî?ÅÌÉú?ºÎ©¥
		if(_info.attackObj != NULL && _info.attackObj->isRender)
		ZORDER_M->renderObject(getMapDC(), _info.attackObj, RENDERTYPE::FRAME_RENDER);
	}

	//?îÎ≤ÑÍπ????âÌä∏ ?åÎçî
	if (KEY_M->isToggleKey(VK_SHIFT))
	{
		Rectangle(getMapDC(), _obj.shadow.rc);
		if(_info.isAttack) Rectangle(getMapDC(), _info.attackRc);
	}

	}

//?ÅÌÉú ÏßÄ??
void Player::setState(PL_STATE state)
{
	if (_info.state == state)return;	//Í∞ôÏ? ?ÅÌÉúÎ©?Î≥ÄÍ≤ΩÌïòÏßÄ ?äÎäî??
	_info.preState = _info.state;		//Î≥ÄÍ≤????ÑÏû¨ ?ÅÌÉúÎ•??Ä?•Ìïú??
	_info.state = state;				//?ÑÏû¨ ?ÅÌÉúÎ•?Î≥ÄÍ≤ΩÌïú??

	//?ÅÌÉúÎ•?Îπ†Ï†∏?òÏò®??
	if (_IState != NULL) _IState->ExitState();

	//?ÅÌÉúÎ•?Î≥ÄÍ≤ΩÌïú??
	switch (_info.state)
	{
		//Í∏∞Î≥∏?ôÏûë
	case PL_STATE::IDLE:	    _IState = _idle;		 break;
	case PL_STATE::WAIT:	    _IState = _wait;		 break;
	case PL_STATE::WALK:	    _IState = _walk;		 break;
	case PL_STATE::RUN:		    _IState = _run;			 break;
	case PL_STATE::JUMP:		_IState = _jump;		 break;
	case PL_STATE::STICK:	    _IState = _stick;		 break;
	case PL_STATE::CLIMB:      _IState = _climb;		 break;
	case PL_STATE::CLIMBTOP:   _IState = _climbTop;		 break;
	case PL_STATE::PICK:      _IState = _pick;			 break;
		//Í∞Ä??Î∞??ºÍ≤©
	case PL_STATE::GRAB:       _IState = _grab;			 break;
	case PL_STATE::GUARD:       _IState = _guard;		 break;
	case PL_STATE::ROLL:       _IState = _roll;			 break;
	case PL_STATE::HIT:		    _IState = _hit;			 break;
	case PL_STATE::STUN:        _IState = _stun;		 break;
	case PL_STATE::STAND:		_IState = _stand;		 break;
	case PL_STATE::DOWN:	    _IState = _down;		 break;
	case PL_STATE::DEAD:	    _IState = _dead;		 break;
		// Í≥µÍ≤©
	case PL_STATE::THROW:	    _IState = _throw;		 break;
	case PL_STATE::STOMP:	    _IState = _stomp;		 break;
	case PL_STATE::COMBO1:	    _IState = _combo1;		 break;
	case PL_STATE::COMBO2:	    _IState = _combo2;		 break;
	case PL_STATE::COMBO3:	    _IState = _combo3;		 break;
	case PL_STATE::SATTACK:     _IState = _sAttack;		 break;
	case PL_STATE::DASHATTACK:  _IState = _dashAttack;	 break;
	case PL_STATE::DASHSATTACK: _IState = _dashSAttack;  break;
	case PL_STATE::JUMPATTACK:  _IState = _jumpAttack;	 break;
	case PL_STATE::SATTACKDOWN: _IState = _SAttackDown;  break;
	default: break;
	}

	//?ÅÌÉú??ÎßÅÌÅ¨?òÍ≥† ÏßÑÏûÖ?úÎã§.
	_IState->LinkPlAddress(this);
	_IState->EnterState();
}

//Í∞ôÏ? Ï§??†Î¨¥
bool Player::isRange(GameObject obj)
{
	//?ÑÏπò Ï∞®Ïù¥Í∞Ä 15ÎØ∏Îßå?¥Î©¥
	if (abs(_obj.pos.z - obj.pos.z) < 40) return true;
	return false;
}

//Í∞ôÏ? Ï§??†Î¨¥
bool Player::isRange(GameObject obj, float value)
{
	//?ÑÏπò Ï∞®Ïù¥Í∞Ä Í∞?ÎØ∏Îßå?¥Î©¥
	if (abs(_obj.pos.z - obj.pos.z) < value) return true;
	return false;
}

//Î¨¥Í∏∞?ÖÎéÉ
void Player::weaponUpdate()
{
	if (!_info.attackObj) return;

	switch (_info.goalState)
	{
	case GOALPOS::PLAYER:
		break;
	case GOALPOS::WINOUT:
		//Í≥®Î°ú ?¥Îèô?òÎã§Í∞Ä ?îÎ©¥Í≥®Ïóê Í∞ÄÎ©?Í≥®ÏÉÅ?úÎ? Î∞îÎã•?ºÎ°ú Î≥ÄÍ≤?
		if (moveAttackObj())
		{
			if (_info.dest == DIRECTION::RIGHT) _info.attackGoal.x -= 30;
			if (_info.dest == DIRECTION::LEFT) _info.attackGoal.x += 30;
			_info.attackGoal.y = 0;
			_info.goalState = GOALPOS::FLOOR;
		}
		break;
	case GOALPOS::FLOOR:
		if (moveAttackObj())
		{
			_info.attackObj->isActive = true;
			_info.attackObj->isRender = true;
			_info.goalState = GOALPOS::PLAYER;
			_objectM->pushWeapon(WEAPON_TYPE::BAT, vector3(_info.attackGoal.x, _info.attackGoal.y, _info.attackGoal.z));
			_info.attackObj = NULL;
		}
		break;
	}
}

bool Player::moveAttackObj()
{
	_info.attackObj->pos.x += cosf(getAngle(_info.attackObj->pos.x, 0,  _info.attackGoal.x, 0)) * 6.0f;
	
	_info.attackObj->pos.z -= sinf(getAngle( 0 ,_info.attackObj->pos.z, 0 , _info.attackGoal.z)) * 6.0f;

	_info.attackObj->pos.y -= sinf(getAngle(0, _info.attackObj->pos.y, 0, _info.attackGoal.y)) * 6.0f;
	
	//Í≥µÍ≤© ?âÌä∏ ?ùÏÑ±
	_info.attackRc = RectMakeCenter(_info.attackObj->pos.x,
		_info.attackObj->pos.z + _info.attackObj->pos.y,
		_info.attackObj->size.x + 200, _info.attackObj->size.z + 100);

	if (getDistance(_info.attackObj->pos.x, _info.attackObj->pos.z + _info.attackObj->pos.y,
		_info.attackGoal.x, _info.attackGoal.z + _info.attackGoal.y) < 5)
	{
		_info.attackObj->pos.x = _info.attackGoal.x;
		_info.attackObj->pos.y = _info.attackGoal.y;
		_info.attackObj->pos.z = _info.attackGoal.z;
		return true;
	}
	return false;
}

void Player::hit()
{
	//?¥Î? ?ÅÌÉúÍ∞Ä ?ÑÎãàÎ©??Ä?¥Î®∏ Ï¥àÍ∏∞??
	if (!_info.isImmune)
	_info.immuneTimer = TIME_M->getWorldTime();

	//?¥Î? ?ÅÌÉúÍ≥?4Ï¥àÍ? ÏßÄ?¨Îã§Î©??¥Î? ?ùÎÇ®
	 if (_info.isImmune && TIME_M->getWorldTime() - _info.immuneTimer > 4.f)
	{
		_info.isImmune = false;
		_obj.alpha = 255;
	}

	 //?ºÍ? 0?¥ÌïòÍ∞Ä ?òÎ©¥
	 if (_info.hp <= 0)setState(PL_STATE::DEAD);

	//Dead ?ÅÌÉúÍ∞Ä ?ÑÎãàÍ≥??¥Î????ÑÎãàÍ≥??§ÌÑ¥ ?ÅÌÉúÍ∞Ä ?ÑÎãàÎ©?
	if (_info.state != PL_STATE::DEAD && !_info.isImmune && _info.state != PL_STATE::STUN)
	{
		//Í∞Ä???ÅÌÉúÍ∞Ä ?ÑÎãàÎ©?
		if (_info.state != PL_STATE::GUARD)
		{
			for (int i = 0; i != _enemyM->getVEnemy().size(); i++)
			{
				if (_enemyM->getVEnemy()[i]->getInfo().isAttack)
				{
					RECT temp;
					if (IntersectRect(&temp, &_obj.rc, &_enemyM->getVEnemy()[i]->getInfo().rcAttack)
						&& isRange(_enemyM->getVEnemy()[i]->getRefObj()))
					{
						if (_info.hitCount >= 4)
						{ 
							//?ºÍ? 10 ?¥ÌïòÎ©??§ÌÑ¥ / 10 Ï¥àÍ≥ºÎ©??§Ïö¥ ?ÅÌÉú
							_info.hitCount = 0;
							if(_info.hp<=10)setState(PL_STATE::STUN);
							if (_info.hp > 10)setState(PL_STATE::DOWN); 
						}
						else setState(PL_STATE::HIT);
					}
				}
			}
			

		}

	}
}


//?§ÌÖå?¥Ï?Í∞Ä Î∞îÎÄ??åÎßà??Ï¥àÍ∏∞?îÏãú?§Îäî ?®Ïàò
void Player::stageInit()
{
	/*====================================================================
		?§ÌÖå?¥Ï?Í∞Ä Î∞îÎÄ??åÎßà??Ï¥àÍ∏∞?îÏãú?§Îäî ?®Ïàò?ÖÎãà??
	====================================================================*/
	switch (_stageM->getCurStage()) // ?ÑÏû¨ ?§ÌÖå?¥Ï???
	{
	case STAGETYPE::EASY: // ?ÑÏû¨ ?§ÌÖå?¥Ï?Í∞Ä ?¥Ï?Î©?
		if (_stageM->getPreStage() == STAGETYPE::NORMAL) // ?¥Ï†Ñ ?§ÌÖå?¥Ï?Í∞Ä ?∏Îßê?¥Ï??ºÎ©¥
		{
			_obj.setPosX(1445);
			_obj.setPosY(0);
			_obj.setPosZ(420);
		}
		break;
	case STAGETYPE::NORMAL:  // ?ÑÏû¨ ?§ÌÖå?¥Ï?Í∞Ä ?∏Îßê?¥Î©¥
		if (_stageM->getPreStage() == STAGETYPE::EASY) // ?¥Ï†Ñ ?§ÌÖå?¥Ï?Í∞Ä ?∏Îßê?¥Ï??ºÎ©¥
		{
			_obj.setPosX(180);
			_obj.setPosY(0);
			_obj.setPosZ(700);
		}
		else if (_stageM->getPreStage() == STAGETYPE::HARD) // ?¥Ï†Ñ ?§ÌÖå?¥Ï?Í∞Ä ?òÎìú?¥Ï??ºÎ©¥
		{
			_obj.setPosX(2645);
			_obj.setPosY(0);
			_obj.setPosZ(670);
		}
		break;
	case STAGETYPE::HARD: // ?ÑÏû¨ ?§ÌÖå?¥Ï?Í∞Ä ?òÎìúÎ©?
		if (_stageM->getPreStage() == STAGETYPE::NORMAL) // ?¥Ï†Ñ ?§ÌÖå?¥Ï?Í∞Ä ?∏Îßê?¥Ï??ºÎ©¥
		{
			_obj.setPosX(270);
			_obj.setPosY(0); 
			_obj.setPosZ(480);
		}
		else if (_stageM->getPreStage() == STAGETYPE::BOSS) // ?¥Ï†Ñ ?§ÌÖå?¥Ï?Í∞Ä Î≥¥Ïä§?Ä?ºÎ©¥
		{
			_obj.setPosX(2070);
			_obj.setPosY(0);
			_obj.setPosZ(1370);
		}
		break;
	case STAGETYPE::BOSS: // ?ÑÏû¨ ?§ÌÖå?¥Ï?Í∞Ä Î≥¥Ïä§Î©?
		if (_stageM->getPreStage() == STAGETYPE::HARD) // ?¥Ï†Ñ ?§ÌÖå?¥Ï?Í∞Ä ?òÎìú?¥Ï??ºÎ©¥
		{
			_obj.setPosX(275);
			_obj.setPosY(0);
			_obj.setPosZ(605);
		}
		break;
	default:
		break;
	}

	/*====================================================================
		ÎßÅÌÅ¨ : ?êÎÑàÎØ∏Îß§?àÏ?, ?§Î∏å?ùÌä∏ Îß§Îãà?Ä?Ä ÎßÅÌÅ¨?©Îãà??
	====================================================================*/
	_enemyM = _stageM->getStage()->getEnemyM();
	_objectM = _stageM->getStage()->getObjectM();
}

//?¥Î?ÏßÄ Î≥ÄÍ≤?
void Player::changeImg(string imgName, bool reverse)
{
	//?¥Î?ÏßÄÎ•?Î∞îÍæº??
	_obj.img = IMG_M->findImage(imgName);

	//Î∞©Ìñ•Í≥?Î¶¨Î≤Ñ???¨Î? ?∞Î•∏ ?ÑÎ†à??x ?∏Îç±???§Ï†ï
	switch (_info.dest)
	{
	case DIRECTION::LEFT:
		if (!reverse)_obj.imgIndex.x = 0;
		else if (reverse)_obj.imgIndex.x = _obj.img->getMaxFrameX();
		_obj.imgIndex.y = 0;
		break;

	case DIRECTION::RIGHT:
		if (!reverse)_obj.imgIndex.x = _obj.img->getMaxFrameX();
		else if (reverse)_obj.imgIndex.x = 0;
		_obj.imgIndex.y = 1;
		break;
	}

	//?ÑÎ†à???úÍ∞Ñ Í∞±Ïã†?òÏó¨ Î∞îÎ°ú ?ÑÎ†à??Î≥ÄÍ≤?
	_info.frameTimer = TIME_M->getWorldTime();

}

//?ÑÎ†à???∞ÏÇ∞
void Player::setFrame(FRAMETYPE frameType, float frameInterval)
{
	//?ÑÎ†à??y Î≤àÌò∏ ?§Ï†ï
	switch (_info.dest)
	{
	case DIRECTION::LEFT:
		_obj.imgIndex.y = 0;
		break;
	case DIRECTION::RIGHT:
		_obj.imgIndex.y = 1;
		break;
	}
	if (_info.state == PL_STATE::CLIMB || _info.state == PL_STATE::CLIMBTOP)
		_obj.imgIndex.y = 0;
	//?ÑÎ†à??y Î≤àÌò∏ ?∏ÌåÖ
	_obj.img->setFrameY((int)_info.dest);

	//?ÑÎ†à???§Ìñâ ?úÍ∞Ñ ?§Ï†ï
	if (TIME_M->getWorldTime() - _info.frameTimer > frameInterval)
	{
		//?úÍ∞Ñ Í∞±Ïã†
		_info.frameTimer = TIME_M->getWorldTime();
		switch (_info.dest)
		{
		case DIRECTION::LEFT:
			if (frameType != FRAMETYPE::REVERSELOOP && frameType != FRAMETYPE::REVERSEONCE) ++_obj.imgIndex.x;
			else --_obj.imgIndex.x;


			break;
		case DIRECTION::RIGHT:
			if (frameType != FRAMETYPE::REVERSELOOP&& frameType != FRAMETYPE::REVERSEONCE) --_obj.imgIndex.x;
			else  ++_obj.imgIndex.x;
			break;
		}
	}

	//?ÑÎ†à??x Î≤àÌò∏ Ï°∞Ï†à
	switch (frameType)
	{
	case FRAMETYPE::ONCE://??Î≤??¨ÏÉù
	{
		//?ºÏ™Ω??Í≤ΩÏö∞ x?∏Îç±?§Í? 0Î≤àÎ??? ?ùÎ≤àÍπåÏ? ?ÑÎ†à?ÑÏù¥ ???òÎ©¥ ?ùÎ≤à?∏Î°ú ?ÑÎ†à?ÑÎ≤à??Í≥†Ï†ï
		if (_info.dest == DIRECTION::LEFT && _obj.imgIndex.x > _obj.img->getMaxFrameX())
		{
			_obj.imgIndex.x = _obj.img->getMaxFrameX();
		}
		//?§Î•∏Ï™ΩÏùò Í≤ΩÏö∞ x?∏Îç±?§Í? ?ùÎ≤àÎ∂Ä??0Î≤àÍπåÏßÄ ?ÑÎ†à?ÑÏù¥ ???òÎ©¥ 0Î≤àÏúºÎ°??ÑÎ†à??Î≤àÌò∏ Í≥†Ï†ï
		else if (_info.dest == DIRECTION::RIGHT && _obj.imgIndex.x < 0)
		{
			_obj.imgIndex.x = 0;
		}

	}
	break;
	case FRAMETYPE::LOOP://Î¨¥Ìïú ?¨ÏÉù
	{
		//?ºÏ™Ω??Í≤ΩÏö∞ x?∏Îç±?§Í? 0Î≤àÎ??? ?ùÎ≤àÍπåÏ? ?ÑÎ†à?ÑÏù¥ ???òÎ©¥ ?ùÎ≤à?∏Î°ú ?ÑÎ†à?ÑÎ≤à??0Î≤àÏúºÎ°?Í∞±Ïã†
		if (_info.dest == DIRECTION::LEFT && _obj.imgIndex.x > _obj.img->getMaxFrameX())
			_obj.imgIndex.x = 0;

		//?§Î•∏Ï™ΩÏùò Í≤ΩÏö∞ x?∏Îç±?§Í? ?ùÎ≤àÎ∂Ä??0Î≤àÍπåÏßÄ ?ÑÎ†à?ÑÏù¥ ???òÎ©¥ 0Î≤àÏúºÎ°??ÑÎ†à??Î≤àÌò∏ ?ùÎ≤à?∏Î°ú Í∞±Ïã†
		else if (_info.dest == DIRECTION::RIGHT && _obj.imgIndex.x < 0)
			_obj.imgIndex.x = _obj.img->getMaxFrameX();
	}
	break;
	case FRAMETYPE::REVERSEONCE://Î∞òÎ? ?úÎ≤à ?¨ÏÉù
	{
		if (_info.dest == DIRECTION::RIGHT && _obj.imgIndex.x > _obj.img->getMaxFrameX())
		{
			_obj.imgIndex.x = _obj.img->getMaxFrameX(); return;
		}
		else if (_info.dest == DIRECTION::LEFT && _obj.imgIndex.x < 0)
		{
			_obj.imgIndex.x = 0; return;
		}
	}
	break;
	case FRAMETYPE::REVERSELOOP://Î∞òÎ? Î¨¥Ìïú ?¨ÏÉù
	{
		if (_info.dest == DIRECTION::RIGHT && _obj.imgIndex.x > _obj.img->getMaxFrameX())
			_obj.imgIndex.x = 0;

		else if (_info.dest == DIRECTION::LEFT && _obj.imgIndex.x < 0)
			_obj.imgIndex.x = _obj.img->getMaxFrameX();

	}
	break;
	}

}

//?ÑÎ†à???§Ìñâ
void Player::playFrame()
{
	switch (_info.state)
	{
		//Î¨¥Ìïú?¨ÏÉù (?ºÎ∞ò ?çÎèÑ)
	case PL_STATE::WAIT:

		setFrame(FRAMETYPE::LOOP, FRAMEINTERVAL);
		_info.rendType = RENDERTYPE::FRAME_RENDER;
		break;
		//Î∞òÎ? Î¨¥Ìïú?¨ÏÉù (Îπ®Î¶¨)
	case PL_STATE::RUN:
		setFrame(FRAMETYPE::REVERSELOOP, FRAMEINTERVAL*0.35);
		break;
		//Î∞òÎ? Î¨¥Ìïú?¨ÏÉù
	case PL_STATE::STUN:
	case PL_STATE::IDLE:	case PL_STATE::WALK:
		setFrame(FRAMETYPE::REVERSELOOP, FRAMEINTERVAL);
		break;

		//?úÎ≤à (Ï≤úÏ≤ú??
	case PL_STATE::PICK:	case PL_STATE::GRAB:
	case PL_STATE::STICK:	case PL_STATE::HIT:
		setFrame(FRAMETYPE::ONCE, FRAMEINTERVAL * 3);
	case PL_STATE::CLIMBTOP:
		setFrame(FRAMETYPE::ONCE, FRAMEINTERVAL * 5);
		_info.rendType = RENDERTYPE::FRAME_RENDER;
		break;
		//?úÎ≤à (?ºÎ∞ò ?çÎèÑ)
	case PL_STATE::JUMP:
	case PL_STATE::ROLL:
	case PL_STATE::STAND:
	case PL_STATE::DOWN:	case PL_STATE::DEAD:
	case PL_STATE::THROW:
	case PL_STATE::COMBO1:	case PL_STATE::COMBO2:
	case PL_STATE::COMBO3:	case PL_STATE::SATTACK:
	case PL_STATE::DASHSATTACK:
	case PL_STATE::JUMPATTACK:
		setFrame(FRAMETYPE::ONCE, FRAMEINTERVAL);
		_info.rendType = RENDERTYPE::FRAME_RENDER;
		break;
		//Î∞òÎ? ?úÎ≤à?¨ÏÉù (?ºÎ∞ò ?çÎèÑ)
	case PL_STATE::STOMP:
	case PL_STATE::DASHATTACK:	case PL_STATE::SATTACKDOWN:
		setFrame(FRAMETYPE::REVERSEONCE, FRAMEINTERVAL);
		_info.rendType = RENDERTYPE::FRAME_RENDER;
		break;
		//Î∞òÎ? ?úÎ≤à?¨ÏÉù (Îπ®Î¶¨)
	case PL_STATE::GUARD:
		setFrame(FRAMETYPE::REVERSEONCE, FRAMEINTERVAL*0.4);
		_info.rendType = RENDERTYPE::FRAME_RENDER;
		break;
		//?†Îãà?úÎçî
	case PL_STATE::CLIMB:
		_info.rendType = RENDERTYPE::ANI_RENDER;
		_obj.ani->setFPS(1);
		break;
	}

}

//Ï¢åÌëú?¥Îèô
void Player::movePos(float x, float z, float jumpPower)
{
	_obj.pos.x += x;
	_obj.pos.z += z;
	_obj.pos.y -= jumpPower;

	//Í∑∏Î¶º?êÎßå ?ºÎã® ?úÎ≤à ?ÖÎç∞?¥Ìä∏ (Ï∂©ÎèåÏ≤òÎ¶¨Î•??ÑÌïú Í±? Í±¥ÎìúÎ¶¨Î©¥ ?àÎê®!)
	_obj.shadowUpdate();

	//Ï∂©ÎèåÏ≤òÎ¶¨
	_colM->playerObjectCollision();

	//Í∑∏Î¶º???ÑÎûòÎ°????®Ïñ¥ÏßÄ?ÑÎ°ù ?àÏô∏Ï≤òÎ¶¨
	if (_obj.pos.y > 0)_obj.pos.y = 0;

	//ÏµúÏ¢Ö ?âÌä∏ Í∞±Ïã†
	_obj.update();
}

//Ï¢åÌëú?§Ï†ï
void Player::setPos(float x, float z, float y)
{
	_obj.pos.x = x;
	_obj.pos.z = z;
	_obj.pos.y = y;

	//Í∑∏Î¶º?êÎßå ?ºÎã® ?úÎ≤à ?ÖÎç∞?¥Ìä∏ (Ï∂©ÎèåÏ≤òÎ¶¨Î•??ÑÌïúÍ±? Í±¥ÎìúÎ¶¨Î©¥ ?àÎê®!)
	_obj.shadowUpdate();

	//Ï∂©ÎèåÏ≤òÎ¶¨
	_colM->playerObjectCollision();

	//Í∑∏Î¶º???ÑÎûòÎ°????®Ïñ¥ÏßÄ?ÑÎ°ù ?àÏô∏Ï≤òÎ¶¨
	if (_obj.pos.y > 0)_obj.pos.y = 0;

	//ÏµúÏ¢Ö ?âÌä∏ Í∞±Ïã†
	_obj.update();
}

//æ∆¿Ã≈€¿Ã∂˚ ªÛ»£¿€øÎ
void Player::checkItem()
{
	RECT temp;
	for (int i = 0; i != _objectM->getVObject().size();i++)
	{
		//»∞º∫»≠ ªÛ≈¬¿œ∂ß
		if (_objectM->getVObject()[i]->getObj()->isActive)
		{
			// √Êµπ«—¥Ÿ∏È
			if (IntersectRect(&temp, &_obj.rc, &_objectM->getVObject()[i]->getRefObj().rc))
			{
				switch (_objectM->getVObject()[i]->getInfo().type)
				{
				//º“¡ˆ±› ø√∑¡¡‹
				case ITEM_TYPE::MONEY:
					break;
				case ITEM_TYPE::COIN:
					break;
				//√º∑¬»∏∫π
				case ITEM_TYPE::MEAT:
				case ITEM_TYPE::APPLE:
				case ITEM_TYPE::HEN:
				case ITEM_TYPE::CHILI:
					if (_info.hp < _info.maxHP)
					{
						_info.hp += _objectM->getVObject()[i]->getInfo().healValue;
						_objectM->popObject(i);
						if (i == _objectM->getVObject().size())return;
					}
					break;
				}
			}
			
		}
	}

	//√º∑¬ºˆƒ° ∫∏¡§
	if (_info.hp > _info.maxHP)
	{
		_info.hp = _info.maxHP;
	}
}


//Ï§ëÎ†•?ëÏö©
void Player::gravity()
{
	if (_info.isSky) _info.jumpPower -= GRAVITY;
	if (_obj.pos.y >= 0 && _info.isSky)
	{
		setState(PL_STATE::IDLE);
		//Í±∑Í±∞???∞Í≥†?àÏóàÍ≥? ?§Î? Í≥ÑÏÜç ?ÑÎ•¥Í≥†Ïûà?ºÎ©¥ Í∑??ÅÌÉú Í∑∏Î?Î°úÎèå?ÑÏò§Í∏?
		if (_info.preState == PL_STATE::WALK || _info.preState == PL_STATE::RUN)
		{
			if (_info.dest == DIRECTION::LEFT && KEY_M->isStayKeyDown(VK_LEFT))setState(_info.preState);
			if (_info.dest == DIRECTION::RIGHT && KEY_M->isStayKeyDown(VK_RIGHT))setState(_info.preState);
		}
		_info.isSky = false;
		_platform = nullptr;
	}
	if (_obj.pos.y > 0) _info.jumpPower = 0;
	movePos(0, 0, _info.jumpPower);
}

//?§ÏûÖ??
void Player::keyInput()
{
	//?§Ï°∞?ëÏùÑ Î™ªÌïò???ÅÌÉú?ºÎ©¥ Î¶¨ÌÑ¥
	if (!_info.isControl) return;

	//Í≥µÍ≤©?§Î∞õÍ∏?Ïª§Îß®?úÎ??ÑÌï¥)
	if (KEY_M->isOnceKeyDownV('D'));

	//?¨Îã§Î¶¨Ïò§Î•¥Í∏∞
	if (_info.isClimb && (GetAsyncKeyState(VK_UP) & 0x8000)) setState(PL_STATE::CLIMB);

	//?êÌîÑ
	if (KEY_M->isOnceKeyDownV('A') && !_info.isSky)
	{
		//?¥Ï†Ñ?ÅÌÉú ?Ä??
		_info.preState = _info.state;
		_info.isSky = true;
		_info.jumpPower = JUMPPOWER;
		movePos(0, 0, JUMPPOWER);
		//?êÌîÑ?åÏõåÍ∞Ä - Î©??êÌîÑ?ÅÌÉúÎ°??ÑÌôò
		if (_info.jumpPower > 0.4)setState(PL_STATE::JUMP);
	}
	//Íµ¨Î•¥Í∏?
	if (KEY_M->isOnceKeyDownV('W') && !_info.isSky)
	{
		//?¥Ï†Ñ?ÅÌÉú ?Ä??
		_info.preState = _info.state;
		setState(PL_STATE::ROLL);
	}

	//Î∞©Ìñ•Ï°∞Ïûë??Î™ªÌïò???ÅÌÉú?ºÎ©¥ Î¶¨ÌÑ¥
	if (!_info.isConDest) return;

	//??
	if (KEY_M->isOnceKeyDownV(VK_LEFT) || KEY_M->isStayKeyDown(VK_LEFT))
	{
		_info.moveDest = MOVE_DIRECTION::LEFT;
		_info.dest = DIRECTION::LEFT;
	}
	//??
	if (KEY_M->isOnceKeyDownV(VK_RIGHT) || KEY_M->isStayKeyDown(VK_RIGHT))
	{
		_info.moveDest = MOVE_DIRECTION::RIGHT;
		_info.dest = DIRECTION::RIGHT;
	}
	//??
	if (KEY_M->isOnceKeyDownV(VK_UP) || KEY_M->isStayKeyDown(VK_UP))_info.moveDest = MOVE_DIRECTION::UP;
	//?ÑÎûò
	if (KEY_M->isOnceKeyDownV(VK_DOWN) || KEY_M->isStayKeyDown(VK_DOWN))_info.moveDest = MOVE_DIRECTION::DOWN;


	//?§Ïª§Îß®Îìú
	if (!_info.isSky && KEY_M->getVKeyBuffer().size() >= 3)
	{
		//Î∞îÎùºÎ≥¥Îäî Î∞©Ìñ•?? ??+ d Ïª§Îß®??Í≥µÍ≤©
		if (KEY_M->getKeyBuffer(0) == 'D' &&KEY_M->getKeyBuffer(1) == VK_DOWN
			&& KEY_M->getKeyBuffer(2) == VK_RIGHT && _info.dest == DIRECTION::RIGHT)
			setState(PL_STATE::SATTACKDOWN);

		if (KEY_M->getKeyBuffer(0) == 'D' &&KEY_M->getKeyBuffer(1) == VK_DOWN
			&& KEY_M->getKeyBuffer(2) == VK_LEFT && _info.dest == DIRECTION::LEFT)
			setState(PL_STATE::SATTACKDOWN);

	}
}
